{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      userInput: \"\",\n      messages: [{\n        text: \"안녕하세요! 김치 배합에 대해 질문해 주세요.\",\n        type: \"bot\"\n      }],\n      isLoading: false,\n      openAiApiKey: process.env.VUE_APP_OPENAI_API_KEY,\n      // 🔹 OpenAI API 키\n      openAiEndpoint: \"https://api.openai.com/v1/chat/completions\",\n      model: \"gpt-3.5-turbo\",\n      retryCount: 0,\n      // 🔹 API 재시도 횟수 추적\n      maxRetries: 1 // 🔹 최대 재시도 횟수\n    };\n  },\n  methods: {\n    async sendMessage() {\n      if (!this.userInput.trim() || this.isLoading) return;\n      this.messages.push({\n        text: this.userInput,\n        type: \"user\"\n      });\n      const userMessage = this.userInput;\n      this.userInput = \"\";\n      this.isLoading = true;\n      this.$nextTick(() => this.scrollToBottom());\n      setTimeout(async () => {\n        await this.callOpenAiApi(userMessage);\n      }, 2000); // ✅ API 호출 2초 지연\n    },\n    async callOpenAiApi(userMessage) {\n      try {\n        const response = await fetch(this.openAiEndpoint, {\n          method: \"POST\",\n          headers: {\n            \"Authorization\": `Bearer ${this.openAiApiKey}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            model: this.model,\n            messages: [{\n              role: \"system\",\n              content: \"You are a helpful assistant.\"\n            }, {\n              role: \"user\",\n              content: userMessage\n            }],\n            temperature: 0.7\n          })\n        });\n        const data = await response.json();\n        console.log(\"📌 OpenAI API 응답:\", data);\n        if (data.choices && data.choices.length > 0) {\n          this.messages.push({\n            text: data.choices[0].message.content,\n            type: \"bot\"\n          });\n        } else {\n          this.messages.push({\n            text: \"API 응답이 없습니다. 다시 시도해 주세요.\",\n            type: \"bot\"\n          });\n        }\n        this.retryCount = 0; // ✅ 성공하면 재시도 횟수 초기화\n      } catch (error) {\n        console.error(\"🚨 API 요청 실패:\", error);\n        if (error.response && error.response.status === 429 && this.retryCount < this.maxRetries) {\n          console.warn(`⚠️ API Rate Limit 초과, ${this.retryCount + 1}회 재시도`);\n          this.retryCount++;\n          setTimeout(() => this.callOpenAiApi(userMessage), 5000); // ✅ 5초 후 재시도\n        } else {\n          this.messages.push({\n            text: \"오류가 발생했습니다. 다시 시도해주세요.\",\n            type: \"bot\"\n          });\n          this.retryCount = 0;\n        }\n      } finally {\n        this.isLoading = false;\n        this.$nextTick(() => this.scrollToBottom());\n      }\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const chatBody = this.$refs.chatBody;\n        if (chatBody) {\n          chatBody.scrollTop = chatBody.scrollHeight;\n        }\n      });\n    }\n  },\n  mounted() {\n    console.log(\"🔹 환경 변수 확인:\", process.env.VUE_APP_OPENAI_API_KEY);\n  }\n};","map":{"version":3,"names":["data","userInput","messages","text","type","isLoading","openAiApiKey","process","env","VUE_APP_OPENAI_API_KEY","openAiEndpoint","model","retryCount","maxRetries","methods","sendMessage","trim","push","userMessage","$nextTick","scrollToBottom","setTimeout","callOpenAiApi","response","fetch","method","headers","body","JSON","stringify","role","content","temperature","json","console","log","choices","length","message","error","status","warn","chatBody","$refs","scrollTop","scrollHeight","mounted"],"sources":["C:\\Users\\yth98\\Documents\\KimchiLabX\\src\\components\\ChatBot.vue"],"sourcesContent":["<template>\r\n  <div class=\"chatbot\">\r\n    <div class=\"chat-body\" ref=\"chatBody\">\r\n      <div v-for=\"(message, index) in messages\" :key=\"index\" :class=\"message.type\">\r\n        {{ message.text }}\r\n      </div>\r\n    </div>\r\n    <div class=\"chat-input\">\r\n      <input type=\"text\" v-model=\"userInput\" @keyup.enter=\"sendMessage\" placeholder=\"메시지를 입력하세요...\" />\r\n      <button @click=\"sendMessage\" :disabled=\"isLoading\">전송</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      userInput: \"\",\r\n      messages: [{ text: \"안녕하세요! 김치 배합에 대해 질문해 주세요.\", type: \"bot\" }],\r\n      isLoading: false,\r\n      openAiApiKey: process.env.VUE_APP_OPENAI_API_KEY, // 🔹 OpenAI API 키\r\n      openAiEndpoint: \"https://api.openai.com/v1/chat/completions\",\r\n      model: \"gpt-3.5-turbo\",\r\n      retryCount: 0, // 🔹 API 재시도 횟수 추적\r\n      maxRetries: 1, // 🔹 최대 재시도 횟수\r\n    };\r\n  },\r\n  methods: {\r\n    async sendMessage() {\r\n      if (!this.userInput.trim() || this.isLoading) return;\r\n      this.messages.push({ text: this.userInput, type: \"user\" });\r\n\r\n      const userMessage = this.userInput;\r\n      this.userInput = \"\";\r\n      this.isLoading = true;\r\n      this.$nextTick(() => this.scrollToBottom());\r\n\r\n      setTimeout(async () => {\r\n        await this.callOpenAiApi(userMessage);\r\n      }, 2000); // ✅ API 호출 2초 지연\r\n    },\r\n\r\n    async callOpenAiApi(userMessage) {\r\n      try {\r\n        const response = await fetch(this.openAiEndpoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Authorization\": `Bearer ${this.openAiApiKey}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            model: this.model,\r\n            messages: [{ role: \"system\", content: \"You are a helpful assistant.\" }, { role: \"user\", content: userMessage }],\r\n            temperature: 0.7,\r\n          }),\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(\"📌 OpenAI API 응답:\", data);\r\n\r\n        if (data.choices && data.choices.length > 0) {\r\n          this.messages.push({ text: data.choices[0].message.content, type: \"bot\" });\r\n        } else {\r\n          this.messages.push({ text: \"API 응답이 없습니다. 다시 시도해 주세요.\", type: \"bot\" });\r\n        }\r\n\r\n        this.retryCount = 0; // ✅ 성공하면 재시도 횟수 초기화\r\n\r\n      } catch (error) {\r\n        console.error(\"🚨 API 요청 실패:\", error);\r\n\r\n        if (error.response && error.response.status === 429 && this.retryCount < this.maxRetries) {\r\n          console.warn(`⚠️ API Rate Limit 초과, ${this.retryCount + 1}회 재시도`);\r\n          this.retryCount++;\r\n          setTimeout(() => this.callOpenAiApi(userMessage), 5000); // ✅ 5초 후 재시도\r\n        } else {\r\n          this.messages.push({ text: \"오류가 발생했습니다. 다시 시도해주세요.\", type: \"bot\" });\r\n          this.retryCount = 0;\r\n        }\r\n      } finally {\r\n        this.isLoading = false;\r\n        this.$nextTick(() => this.scrollToBottom());\r\n      }\r\n    },\r\n\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const chatBody = this.$refs.chatBody;\r\n        if (chatBody) {\r\n          chatBody.scrollTop = chatBody.scrollHeight;\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    console.log(\"🔹 환경 변수 확인:\", process.env.VUE_APP_OPENAI_API_KEY);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chatbot {\r\n  width: 100%;\r\n  height: 200px;\r\n  background: white;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  margin-top: 10px;\r\n}\r\n.chat-body {\r\n  flex: 1;\r\n  padding: 6px;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 150px;\r\n}\r\n.bot, .user {\r\n  padding: 6px;\r\n  border-radius: 4px;\r\n  margin: 3px 0;\r\n}\r\n.bot {\r\n  background: #f1f1f1;\r\n  align-self: flex-start;\r\n}\r\n.user {\r\n  background: #007BFF;\r\n  color: white;\r\n  align-self: flex-end;\r\n}\r\n.chat-input {\r\n  display: flex;\r\n  border-top: 1px solid #ddd;\r\n  padding: 4px;\r\n}\r\n.chat-input input {\r\n  flex: 1;\r\n  padding: 5px;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 14px;\r\n}\r\n.chat-input button {\r\n  padding: 5px 10px;\r\n  background: #007BFF;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 13px;\r\n  border-radius: 5px;\r\n}\r\n.chat-input button:hover {\r\n  background: #0056b3;\r\n}\r\n.chat-input button:disabled {\r\n  background: #aaa;\r\n  cursor: not-allowed;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}