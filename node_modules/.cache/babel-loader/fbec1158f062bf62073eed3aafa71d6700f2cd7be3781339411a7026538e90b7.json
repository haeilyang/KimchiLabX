{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nexport default {\n  props: {\n    ingredients: Array\n  },\n  data() {\n    return {\n      nutritionFactors: {\n        \"절임배추\": {\n          carbs: 5,\n          sugar: 1,\n          protein: 1,\n          fat: 0.1,\n          sodium: 50\n        },\n        \"무\": {\n          carbs: 6,\n          sugar: 2,\n          protein: 1,\n          fat: 0.2,\n          sodium: 30\n        },\n        \"마늘\": {\n          carbs: 33,\n          sugar: 2,\n          protein: 6,\n          fat: 0.5,\n          sodium: 5\n        },\n        \"고춧가루\": {\n          carbs: 55,\n          sugar: 1,\n          protein: 12,\n          fat: 15,\n          sodium: 10\n        },\n        \"멸치액젓\": {\n          carbs: 1,\n          sugar: 0,\n          protein: 10,\n          fat: 1,\n          sodium: 2500\n        },\n        \"새우젓\": {\n          carbs: 3,\n          sugar: 0,\n          protein: 12,\n          fat: 2,\n          sodium: 3000\n        }\n      },\n      dailyValues: {\n        carbs: 300,\n        // g/day\n        sugar: 50,\n        // g/day\n        protein: 50,\n        // g/day\n        fat: 65,\n        // g/day\n        sodium: 2000 // mg/day\n      },\n      nutritionLabels: {\n        carbs: \"탄수화물\",\n        sugar: \"당류\",\n        protein: \"단백질\",\n        fat: \"지방\",\n        sodium: \"나트륨\"\n      }\n    };\n  },\n  computed: {\n    totalNutrition() {\n      let totals = {\n        carbs: 0,\n        sugar: 0,\n        protein: 0,\n        fat: 0,\n        sodium: 0\n      };\n      this.ingredients.forEach(ing => {\n        let factor = this.nutritionFactors[ing.type] || {};\n        Object.keys(totals).forEach(key => {\n          totals[key] += (factor[key] || 0) * (ing.percentage / 100);\n        });\n      });\n      return totals;\n    }\n  },\n  methods: {\n    formatValue(value) {\n      return value >= 1 ? `${value.toFixed(1)} g` : `${(value * 1000).toFixed(0)} mg`;\n    },\n    getDailyValuePercent(key, value) {\n      if (this.dailyValues[key]) {\n        return (value / this.dailyValues[key] * 100).toFixed(0);\n      }\n      return \"-\";\n    }\n  }\n};","map":{"version":3,"names":["props","ingredients","Array","data","nutritionFactors","carbs","sugar","protein","fat","sodium","dailyValues","nutritionLabels","computed","totalNutrition","totals","forEach","ing","factor","type","Object","keys","key","percentage","methods","formatValue","value","toFixed","getDailyValuePercent"],"sources":["C:\\Users\\yth98\\Documents\\KimchiLabX\\src\\components\\NutritionOutput.vue"],"sourcesContent":["<template>\r\n  <div class=\"nutrition-output\">\r\n    <h3>영양정보</h3>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>성분</th>\r\n          <th>총량</th>\r\n          <th>1일 기준치 대비 (%)</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(value, key) in totalNutrition\" :key=\"key\">\r\n          <td>{{ nutritionLabels[key] }}</td>\r\n          <td>{{ formatValue(value) }}</td>\r\n          <td>{{ getDailyValuePercent(key, value) }}%</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <p class=\"footnote\">※ 1일 영양성분 기준치(%)는 2,000kcal 기준이며, 개인의 필요 열량에 따라 다를 수 있습니다.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    ingredients: Array\r\n  },\r\n  data() {\r\n    return {\r\n      nutritionFactors: {\r\n        \"절임배추\": { carbs: 5, sugar: 1, protein: 1, fat: 0.1, sodium: 50 },\r\n        \"무\": { carbs: 6, sugar: 2, protein: 1, fat: 0.2, sodium: 30 },\r\n        \"마늘\": { carbs: 33, sugar: 2, protein: 6, fat: 0.5, sodium: 5 },\r\n        \"고춧가루\": { carbs: 55, sugar: 1, protein: 12, fat: 15, sodium: 10 },\r\n        \"멸치액젓\": { carbs: 1, sugar: 0, protein: 10, fat: 1, sodium: 2500 },\r\n        \"새우젓\": { carbs: 3, sugar: 0, protein: 12, fat: 2, sodium: 3000 }\r\n      },\r\n      dailyValues: {\r\n        carbs: 300, // g/day\r\n        sugar: 50, // g/day\r\n        protein: 50, // g/day\r\n        fat: 65, // g/day\r\n        sodium: 2000 // mg/day\r\n      },\r\n      nutritionLabels: {\r\n        carbs: \"탄수화물\",\r\n        sugar: \"당류\",\r\n        protein: \"단백질\",\r\n        fat: \"지방\",\r\n        sodium: \"나트륨\"\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    totalNutrition() {\r\n      let totals = { carbs: 0, sugar: 0, protein: 0, fat: 0, sodium: 0 };\r\n\r\n      this.ingredients.forEach(ing => {\r\n        let factor = this.nutritionFactors[ing.type] || {};\r\n        Object.keys(totals).forEach(key => {\r\n          totals[key] += (factor[key] || 0) * (ing.percentage / 100);\r\n        });\r\n      });\r\n\r\n      return totals;\r\n    }\r\n  },\r\n  methods: {\r\n    formatValue(value) {\r\n      return value >= 1 ? `${value.toFixed(1)} g` : `${(value * 1000).toFixed(0)} mg`;\r\n    },\r\n    getDailyValuePercent(key, value) {\r\n      if (this.dailyValues[key]) {\r\n        return ((value / this.dailyValues[key]) * 100).toFixed(0);\r\n      }\r\n      return \"-\";\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.nutrition-output {\r\n  border: 1px solid #ddd;\r\n  padding: 15px;\r\n  margin: 5px;\r\n  background-color: white;\r\n  color: black;\r\n  font-family: Arial, sans-serif;\r\n}\r\nh3 {\r\n  text-align: center;\r\n  margin-bottom: 10px;\r\n  font-size: 18px;\r\n}\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  background-color: white;\r\n  color: black;\r\n}\r\nth, td {\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  text-align: center;\r\n}\r\nth {\r\n  background-color: #f4f4f4;\r\n  color: black;\r\n  font-weight: bold;\r\n}\r\n.footnote {\r\n  font-size: 12px;\r\n  margin-top: 5px;\r\n  text-align: center;\r\n  color: #555;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}