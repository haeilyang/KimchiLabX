{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chatbot\"\n};\nconst _hoisted_2 = {\n  class: \"chat-body\",\n  ref: \"chatBody\"\n};\nconst _hoisted_3 = {\n  class: \"chat-input\"\n};\nconst _hoisted_4 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(message.type)\n    }, _toDisplayString(message.text), 3);\n  }), 128))], 512), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userInput = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî...\"\n  }, null, 544), [[_vModelText, $data.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    disabled: $data.isLoading\n  }, \"Ï†ÑÏÜ°\", 8, _hoisted_4)])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","messages","message","index","key","_normalizeClass","type","text","_hoisted_3","_cache","$event","userInput","onKeyup","_withKeys","args","$options","sendMessage","placeholder","onClick","disabled","isLoading","_hoisted_4"],"sources":["C:\\Users\\yth98\\Documents\\KimchiLabX\\src\\components\\ChatBot.vue"],"sourcesContent":["<template>\r\n  <div class=\"chatbot\">\r\n    <div class=\"chat-body\" ref=\"chatBody\">\r\n      <div v-for=\"(message, index) in messages\" :key=\"index\" :class=\"message.type\">\r\n        {{ message.text }}\r\n      </div>\r\n    </div>\r\n    <div class=\"chat-input\">\r\n      <input type=\"text\" v-model=\"userInput\" @keyup.enter=\"sendMessage\" placeholder=\"Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî...\" />\r\n      <button @click=\"sendMessage\" :disabled=\"isLoading\">Ï†ÑÏÜ°</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      userInput: \"\",\r\n      messages: [{ text: \"ÏïàÎÖïÌïòÏÑ∏Ïöî! ÍπÄÏπò Î∞∞Ìï©Ïóê ÎåÄÌï¥ ÏßàÎ¨∏Ìï¥ Ï£ºÏÑ∏Ïöî.\", type: \"bot\" }],\r\n      isLoading: false,\r\n      openAiApiKey: process.env.VUE_APP_OPENAI_API_KEY, // üîπ OpenAI API ÌÇ§\r\n      openAiEndpoint: \"https://api.openai.com/v1/chat/completions\",\r\n      model: \"gpt-3.5-turbo\",\r\n      retryCount: 0, // üîπ API Ïû¨ÏãúÎèÑ ÌöüÏàò Ï∂îÏ†Å\r\n      maxRetries: 1, // üîπ ÏµúÎåÄ Ïû¨ÏãúÎèÑ ÌöüÏàò\r\n    };\r\n  },\r\n  methods: {\r\n    async sendMessage() {\r\n      if (!this.userInput.trim() || this.isLoading) return;\r\n      this.messages.push({ text: this.userInput, type: \"user\" });\r\n\r\n      const userMessage = this.userInput;\r\n      this.userInput = \"\";\r\n      this.isLoading = true;\r\n      this.$nextTick(() => this.scrollToBottom());\r\n\r\n      setTimeout(async () => {\r\n        await this.callOpenAiApi(userMessage);\r\n      }, 2000); // ‚úÖ API Ìò∏Ï∂ú 2Ï¥à ÏßÄÏó∞\r\n    },\r\n\r\n    async callOpenAiApi(userMessage) {\r\n      try {\r\n        const response = await fetch(this.openAiEndpoint, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Authorization\": `Bearer ${this.openAiApiKey}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            model: this.model,\r\n            messages: [{ role: \"system\", content: \"You are a helpful assistant.\" }, { role: \"user\", content: userMessage }],\r\n            temperature: 0.7,\r\n          }),\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(\"üìå OpenAI API ÏùëÎãµ:\", data);\r\n\r\n        if (data.choices && data.choices.length > 0) {\r\n          this.messages.push({ text: data.choices[0].message.content, type: \"bot\" });\r\n        } else {\r\n          this.messages.push({ text: \"API ÏùëÎãµÏù¥ ÏóÜÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.\", type: \"bot\" });\r\n        }\r\n\r\n        this.retryCount = 0; // ‚úÖ ÏÑ±Í≥µÌïòÎ©¥ Ïû¨ÏãúÎèÑ ÌöüÏàò Ï¥àÍ∏∞Ìôî\r\n\r\n      } catch (error) {\r\n        console.error(\"üö® API ÏöîÏ≤≠ Ïã§Ìå®:\", error);\r\n\r\n        if (error.response && error.response.status === 429 && this.retryCount < this.maxRetries) {\r\n          console.warn(`‚ö†Ô∏è API Rate Limit Ï¥àÍ≥º, ${this.retryCount + 1}Ìöå Ïû¨ÏãúÎèÑ`);\r\n          this.retryCount++;\r\n          setTimeout(() => this.callOpenAiApi(userMessage), 5000); // ‚úÖ 5Ï¥à ÌõÑ Ïû¨ÏãúÎèÑ\r\n        } else {\r\n          this.messages.push({ text: \"Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.\", type: \"bot\" });\r\n          this.retryCount = 0;\r\n        }\r\n      } finally {\r\n        this.isLoading = false;\r\n        this.$nextTick(() => this.scrollToBottom());\r\n      }\r\n    },\r\n\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const chatBody = this.$refs.chatBody;\r\n        if (chatBody) {\r\n          chatBody.scrollTop = chatBody.scrollHeight;\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    console.log(\"üîπ ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏:\", process.env.VUE_APP_OPENAI_API_KEY);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chatbot {\r\n  width: 100%;\r\n  height: 200px;\r\n  background: white;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  margin-top: 10px;\r\n}\r\n.chat-body {\r\n  flex: 1;\r\n  padding: 6px;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 150px;\r\n}\r\n.bot, .user {\r\n  padding: 6px;\r\n  border-radius: 4px;\r\n  margin: 3px 0;\r\n}\r\n.bot {\r\n  background: #f1f1f1;\r\n  align-self: flex-start;\r\n}\r\n.user {\r\n  background: #007BFF;\r\n  color: white;\r\n  align-self: flex-end;\r\n}\r\n.chat-input {\r\n  display: flex;\r\n  border-top: 1px solid #ddd;\r\n  padding: 4px;\r\n}\r\n.chat-input input {\r\n  flex: 1;\r\n  padding: 5px;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 14px;\r\n}\r\n.chat-input button {\r\n  padding: 5px 10px;\r\n  background: #007BFF;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 13px;\r\n  border-radius: 5px;\r\n}\r\n.chat-input button:hover {\r\n  background: #0056b3;\r\n}\r\n.chat-input button:disabled {\r\n  background: #aaa;\r\n  cursor: not-allowed;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC,WAAW;EAACC,GAAG,EAAC;;;EAKtBD,KAAK,EAAC;AAAY;mBAP3B;;uBACEE,mBAAA,CAUM,OAVNC,UAUM,GATJC,mBAAA,CAIM,OAJNC,UAIM,I,kBAHJH,mBAAA,CAEMI,SAAA,QALZC,WAAA,CAGsCC,KAAA,CAAAC,QAAQ,EAH9C,CAGmBC,OAAO,EAAEC,KAAK;yBAA3BT,mBAAA,CAEM;MAFqCU,GAAG,EAAED,KAAK;MAAGX,KAAK,EAHnEa,eAAA,CAGqEH,OAAO,CAACI,IAAI;wBACtEJ,OAAO,CAACK,IAAI;oBAGnBX,mBAAA,CAGM,OAHNY,UAGM,G,gBAFJZ,mBAAA,CAAgG;IAAzFU,IAAI,EAAC,MAAM;IARxB,uBAAAG,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAQkCV,KAAA,CAAAW,SAAS,GAAAD,MAAA;IAAGE,OAAK,EAAAH,MAAA,QAAAA,MAAA,MARnDI,SAAA,KAAAC,IAAA,KAQ2DC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAEG,WAAW,EAAC;gCAAlDjB,KAAA,CAAAW,SAAS,E,GACrCf,mBAAA,CAA8D;IAArDsB,OAAK,EAAAT,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAGK,QAAQ,EAAEnB,KAAA,CAAAoB;KAAW,IAAE,KAT3DC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}