{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"nutrition-output\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"h3\", null, \"영양정보\", -1)), _createElementVNode(\"table\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"성분\"), _createElementVNode(\"th\", null, \"총량\"), _createElementVNode(\"th\", null, \"1일 기준치 대비 (%)\")])], -1)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.totalNutrition, (value, key) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: key\n    }, [_createElementVNode(\"td\", null, _toDisplayString($data.nutritionLabels[key]), 1), _createElementVNode(\"td\", null, _toDisplayString($options.formatValue(value)), 1), _createElementVNode(\"td\", null, _toDisplayString($options.getDailyValuePercent(key, value)) + \"%\", 1)]);\n  }), 128))])]), _cache[2] || (_cache[2] = _createElementVNode(\"p\", {\n    class: \"footnote\"\n  }, \"※ 1일 영양성분 기준치(%)는 2,000kcal 기준이며, 개인의 필요 열량에 따라 다를 수 있습니다.\", -1))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_Fragment","_renderList","$options","totalNutrition","value","key","_toDisplayString","$data","nutritionLabels","formatValue","getDailyValuePercent"],"sources":["C:\\Users\\yth98\\Documents\\KimchiLabX\\src\\components\\NutritionOutput.vue"],"sourcesContent":["<template>\r\n  <div class=\"nutrition-output\">\r\n    <h3>영양정보</h3>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>성분</th>\r\n          <th>총량</th>\r\n          <th>1일 기준치 대비 (%)</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(value, key) in totalNutrition\" :key=\"key\">\r\n          <td>{{ nutritionLabels[key] }}</td>\r\n          <td>{{ formatValue(value) }}</td>\r\n          <td>{{ getDailyValuePercent(key, value) }}%</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <p class=\"footnote\">※ 1일 영양성분 기준치(%)는 2,000kcal 기준이며, 개인의 필요 열량에 따라 다를 수 있습니다.</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    ingredients: Array\r\n  },\r\n  data() {\r\n    return {\r\n      nutritionFactors: {\r\n        \"절임배추\": { carbs: 5, sugar: 1, protein: 1, fat: 0.1, sodium: 50 },\r\n        \"무\": { carbs: 6, sugar: 2, protein: 1, fat: 0.2, sodium: 30 },\r\n        \"마늘\": { carbs: 33, sugar: 2, protein: 6, fat: 0.5, sodium: 5 },\r\n        \"고춧가루\": { carbs: 55, sugar: 1, protein: 12, fat: 15, sodium: 10 },\r\n        \"멸치액젓\": { carbs: 1, sugar: 0, protein: 10, fat: 1, sodium: 2500 },\r\n        \"새우젓\": { carbs: 3, sugar: 0, protein: 12, fat: 2, sodium: 3000 }\r\n      },\r\n      dailyValues: {\r\n        carbs: 300, // g/day\r\n        sugar: 50, // g/day\r\n        protein: 50, // g/day\r\n        fat: 65, // g/day\r\n        sodium: 2000 // mg/day\r\n      },\r\n      nutritionLabels: {\r\n        carbs: \"탄수화물\",\r\n        sugar: \"당류\",\r\n        protein: \"단백질\",\r\n        fat: \"지방\",\r\n        sodium: \"나트륨\"\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    totalNutrition() {\r\n      let totals = { carbs: 0, sugar: 0, protein: 0, fat: 0, sodium: 0 };\r\n\r\n      this.ingredients.forEach(ing => {\r\n        let factor = this.nutritionFactors[ing.type] || {};\r\n        Object.keys(totals).forEach(key => {\r\n          totals[key] += (factor[key] || 0) * (ing.percentage / 100);\r\n        });\r\n      });\r\n\r\n      return totals;\r\n    }\r\n  },\r\n  methods: {\r\n    formatValue(value) {\r\n      return value >= 1 ? `${value.toFixed(1)} g` : `${(value * 1000).toFixed(0)} mg`;\r\n    },\r\n    getDailyValuePercent(key, value) {\r\n      if (this.dailyValues[key]) {\r\n        return ((value / this.dailyValues[key]) * 100).toFixed(0);\r\n      }\r\n      return \"-\";\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.nutrition-output {\r\n  border: 1px solid #ddd;\r\n  padding: 15px;\r\n  margin: 5px;\r\n  background-color: white;\r\n  color: black;\r\n  font-family: Arial, sans-serif;\r\n}\r\nh3 {\r\n  text-align: center;\r\n  margin-bottom: 10px;\r\n  font-size: 18px;\r\n}\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  background-color: white;\r\n  color: black;\r\n}\r\nth, td {\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  text-align: center;\r\n}\r\nth {\r\n  background-color: #f4f4f4;\r\n  color: black;\r\n  font-weight: bold;\r\n}\r\n.footnote {\r\n  font-size: 12px;\r\n  margin-top: 5px;\r\n  text-align: center;\r\n  color: #555;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;uBAA7BC,mBAAA,CAmBM,OAnBNC,UAmBM,G,0BAlBJC,mBAAA,CAAa,YAAT,MAAI,QACRA,mBAAA,CAeQ,gB,0BAdNA,mBAAA,CAMQ,gBALNA,mBAAA,CAIK,aAHHA,mBAAA,CAAW,YAAP,IAAE,GACNA,mBAAA,CAAW,YAAP,IAAE,GACNA,mBAAA,CAAsB,YAAlB,eAAa,E,UAGrBA,mBAAA,CAMQ,iB,kBALNF,mBAAA,CAIKG,SAAA,QAhBbC,WAAA,CAYmCC,QAAA,CAAAC,cAAc,EAZjD,CAYoBC,KAAK,EAAEC,GAAG;yBAAtBR,mBAAA,CAIK;MAJuCQ,GAAG,EAAEA;IAAG,IAClDN,mBAAA,CAAmC,YAAAO,gBAAA,CAA5BC,KAAA,CAAAC,eAAe,CAACH,GAAG,QAC1BN,mBAAA,CAAiC,YAAAO,gBAAA,CAA1BJ,QAAA,CAAAO,WAAW,CAACL,KAAK,QACxBL,mBAAA,CAAgD,YAAAO,gBAAA,CAAzCJ,QAAA,CAAAQ,oBAAoB,CAACL,GAAG,EAAED,KAAK,KAAI,GAAC,K;2CAIjDL,mBAAA,CAAkF;IAA/EH,KAAK,EAAC;EAAU,GAAC,4DAA0D,O","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}